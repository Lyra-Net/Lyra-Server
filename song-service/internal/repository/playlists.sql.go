// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: playlists.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPlaylist = `-- name: CreatePlaylist :one
INSERT INTO playlists (playlist_id, playlist_name, owner_id, is_public)
VALUES ($1, $2, $3, $4)
RETURNING playlist_id, playlist_name, owner_id, is_public, created_at, updated_at
`

type CreatePlaylistParams struct {
	PlaylistID   uuid.UUID   `json:"playlist_id"`
	PlaylistName pgtype.Text `json:"playlist_name"`
	OwnerID      uuid.UUID   `json:"owner_id"`
	IsPublic     pgtype.Bool `json:"is_public"`
}

func (q *Queries) CreatePlaylist(ctx context.Context, arg CreatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRow(ctx, createPlaylist,
		arg.PlaylistID,
		arg.PlaylistName,
		arg.OwnerID,
		arg.IsPublic,
	)
	var i Playlist
	err := row.Scan(
		&i.PlaylistID,
		&i.PlaylistName,
		&i.OwnerID,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePlaylist = `-- name: DeletePlaylist :exec
DELETE FROM playlists
WHERE playlist_id = $1
`

func (q *Queries) DeletePlaylist(ctx context.Context, playlistID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePlaylist, playlistID)
	return err
}

const getPlaylistById = `-- name: GetPlaylistById :one
SELECT playlist_id, playlist_name, owner_id, is_public, created_at, updated_at
FROM playlists
WHERE playlist_id = $1
`

func (q *Queries) GetPlaylistById(ctx context.Context, playlistID uuid.UUID) (Playlist, error) {
	row := q.db.QueryRow(ctx, getPlaylistById, playlistID)
	var i Playlist
	err := row.Scan(
		&i.PlaylistID,
		&i.PlaylistName,
		&i.OwnerID,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPlaylists = `-- name: ListPlaylists :many
SELECT playlist_id, playlist_name, owner_id, is_public, created_at, updated_at
FROM playlists
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListPlaylistsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPlaylists(ctx context.Context, arg ListPlaylistsParams) ([]Playlist, error) {
	rows, err := q.db.Query(ctx, listPlaylists, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Playlist{}
	for rows.Next() {
		var i Playlist
		if err := rows.Scan(
			&i.PlaylistID,
			&i.PlaylistName,
			&i.OwnerID,
			&i.IsPublic,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlaylist = `-- name: UpdatePlaylist :one
UPDATE playlists
SET playlist_name = $2, is_public = $3, updated_at = now()
WHERE playlist_id = $1
RETURNING playlist_id, playlist_name, owner_id, is_public, created_at, updated_at
`

type UpdatePlaylistParams struct {
	PlaylistID   uuid.UUID   `json:"playlist_id"`
	PlaylistName pgtype.Text `json:"playlist_name"`
	IsPublic     pgtype.Bool `json:"is_public"`
}

func (q *Queries) UpdatePlaylist(ctx context.Context, arg UpdatePlaylistParams) (Playlist, error) {
	row := q.db.QueryRow(ctx, updatePlaylist, arg.PlaylistID, arg.PlaylistName, arg.IsPublic)
	var i Playlist
	err := row.Scan(
		&i.PlaylistID,
		&i.PlaylistName,
		&i.OwnerID,
		&i.IsPublic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
