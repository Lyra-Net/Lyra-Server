// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: artists.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArtist = `-- name: CreateArtist :one
INSERT INTO artists (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateArtist(ctx context.Context, name string) (Artist, error) {
	row := q.db.QueryRow(ctx, createArtist, name)
	var i Artist
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteArtist = `-- name: DeleteArtist :exec
DELETE FROM artists
WHERE id = $1
`

func (q *Queries) DeleteArtist(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteArtist, id)
	return err
}

const getArtistById = `-- name: GetArtistById :one
SELECT id, name
FROM artists
WHERE id = $1
`

func (q *Queries) GetArtistById(ctx context.Context, id int32) (Artist, error) {
	row := q.db.QueryRow(ctx, getArtistById, id)
	var i Artist
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listArtists = `-- name: ListArtists :many
SELECT id, name
FROM artists
WHERE ($3::text IS NULL OR name ILIKE '%' || $3::text || '%')
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListArtistsParams struct {
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
	Name   pgtype.Text `json:"name"`
}

func (q *Queries) ListArtists(ctx context.Context, arg ListArtistsParams) ([]Artist, error) {
	rows, err := q.db.Query(ctx, listArtists, arg.Limit, arg.Offset, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Artist{}
	for rows.Next() {
		var i Artist
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArtist = `-- name: UpdateArtist :one
UPDATE artists
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateArtistParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateArtist(ctx context.Context, arg UpdateArtistParams) (Artist, error) {
	row := q.db.QueryRow(ctx, updateArtist, arg.ID, arg.Name)
	var i Artist
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
