// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: playlist_song.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const addSongToPlaylist = `-- name: AddSongToPlaylist :exec
INSERT INTO playlist_song (playlist_id, song_id, position)
VALUES (
    $1,
    $2,
    COALESCE((
        SELECT MAX(position) + 1
        FROM playlist_song
        WHERE playlist_id = $1
    ), 1)
)
`

type AddSongToPlaylistParams struct {
	PlaylistID uuid.UUID `json:"playlist_id"`
	SongID     string    `json:"song_id"`
}

func (q *Queries) AddSongToPlaylist(ctx context.Context, arg AddSongToPlaylistParams) error {
	_, err := q.db.Exec(ctx, addSongToPlaylist, arg.PlaylistID, arg.SongID)
	return err
}

const clearPlaylist = `-- name: ClearPlaylist :exec
DELETE FROM playlist_song
WHERE playlist_id = $1
`

func (q *Queries) ClearPlaylist(ctx context.Context, playlistID uuid.UUID) error {
	_, err := q.db.Exec(ctx, clearPlaylist, playlistID)
	return err
}

const getSongPosition = `-- name: GetSongPosition :one
SELECT position
FROM playlist_song
WHERE playlist_id = $1 AND song_id = $2
`

type GetSongPositionParams struct {
	PlaylistID uuid.UUID `json:"playlist_id"`
	SongID     string    `json:"song_id"`
}

func (q *Queries) GetSongPosition(ctx context.Context, arg GetSongPositionParams) (int32, error) {
	row := q.db.QueryRow(ctx, getSongPosition, arg.PlaylistID, arg.SongID)
	var position int32
	err := row.Scan(&position)
	return position, err
}

const removeSongFromPlaylist = `-- name: RemoveSongFromPlaylist :exec
DELETE FROM playlist_song
WHERE playlist_id = $1 AND song_id = $2
`

type RemoveSongFromPlaylistParams struct {
	PlaylistID uuid.UUID `json:"playlist_id"`
	SongID     string    `json:"song_id"`
}

func (q *Queries) RemoveSongFromPlaylist(ctx context.Context, arg RemoveSongFromPlaylistParams) error {
	_, err := q.db.Exec(ctx, removeSongFromPlaylist, arg.PlaylistID, arg.SongID)
	return err
}

const shiftPositionsDown = `-- name: ShiftPositionsDown :exec
UPDATE playlist_song
SET position = position - 1
WHERE playlist_id = $1
  AND position > $2 AND position <= $3
`

type ShiftPositionsDownParams struct {
	PlaylistID uuid.UUID `json:"playlist_id"`
	Position   int32     `json:"position"`
	Position_2 int32     `json:"position_2"`
}

func (q *Queries) ShiftPositionsDown(ctx context.Context, arg ShiftPositionsDownParams) error {
	_, err := q.db.Exec(ctx, shiftPositionsDown, arg.PlaylistID, arg.Position, arg.Position_2)
	return err
}

const shiftPositionsUp = `-- name: ShiftPositionsUp :exec
UPDATE playlist_song
SET position = position + 1
WHERE playlist_id = $1
  AND position >= $2 AND position < $3
`

type ShiftPositionsUpParams struct {
	PlaylistID uuid.UUID `json:"playlist_id"`
	Position   int32     `json:"position"`
	Position_2 int32     `json:"position_2"`
}

func (q *Queries) ShiftPositionsUp(ctx context.Context, arg ShiftPositionsUpParams) error {
	_, err := q.db.Exec(ctx, shiftPositionsUp, arg.PlaylistID, arg.Position, arg.Position_2)
	return err
}

const updateSongPosition = `-- name: UpdateSongPosition :exec
UPDATE playlist_song
SET position = $3
WHERE playlist_id = $1 AND song_id = $2
`

type UpdateSongPositionParams struct {
	PlaylistID uuid.UUID `json:"playlist_id"`
	SongID     string    `json:"song_id"`
	Position   int32     `json:"position"`
}

func (q *Queries) UpdateSongPosition(ctx context.Context, arg UpdateSongPositionParams) error {
	_, err := q.db.Exec(ctx, updateSongPosition, arg.PlaylistID, arg.SongID, arg.Position)
	return err
}
