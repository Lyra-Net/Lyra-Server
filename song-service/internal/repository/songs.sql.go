// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: songs.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSong = `-- name: CreateSong :one
INSERT INTO songs (id, title, title_token, categories, duration, genre, mood)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, title, title_token, categories, duration, genre, mood
`

type CreateSongParams struct {
	ID         string        `json:"id"`
	Title      string        `json:"title"`
	TitleToken []string      `json:"title_token"`
	Categories []string      `json:"categories"`
	Duration   pgtype.Int4   `json:"duration"`
	Genre      NullGenreEnum `json:"genre"`
	Mood       NullMoodEnum  `json:"mood"`
}

type CreateSongRow struct {
	ID         string        `json:"id"`
	Title      string        `json:"title"`
	TitleToken []string      `json:"title_token"`
	Categories []string      `json:"categories"`
	Duration   pgtype.Int4   `json:"duration"`
	Genre      NullGenreEnum `json:"genre"`
	Mood       NullMoodEnum  `json:"mood"`
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) (CreateSongRow, error) {
	row := q.db.QueryRow(ctx, createSong,
		arg.ID,
		arg.Title,
		arg.TitleToken,
		arg.Categories,
		arg.Duration,
		arg.Genre,
		arg.Mood,
	)
	var i CreateSongRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleToken,
		&i.Categories,
		&i.Duration,
		&i.Genre,
		&i.Mood,
	)
	return i, err
}

const deleteSong = `-- name: DeleteSong :exec
DELETE FROM songs
WHERE id = $1
`

func (q *Queries) DeleteSong(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteSong, id)
	return err
}

const getSongById = `-- name: GetSongById :one
SELECT id, title, title_token, categories, duration, genre, mood
FROM songs
WHERE id = $1
`

type GetSongByIdRow struct {
	ID         string        `json:"id"`
	Title      string        `json:"title"`
	TitleToken []string      `json:"title_token"`
	Categories []string      `json:"categories"`
	Duration   pgtype.Int4   `json:"duration"`
	Genre      NullGenreEnum `json:"genre"`
	Mood       NullMoodEnum  `json:"mood"`
}

func (q *Queries) GetSongById(ctx context.Context, id string) (GetSongByIdRow, error) {
	row := q.db.QueryRow(ctx, getSongById, id)
	var i GetSongByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleToken,
		&i.Categories,
		&i.Duration,
		&i.Genre,
		&i.Mood,
	)
	return i, err
}

const listSongs = `-- name: ListSongs :many
SELECT id, title, title_token, categories, duration, genre, mood
FROM songs
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListSongsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListSongsRow struct {
	ID         string        `json:"id"`
	Title      string        `json:"title"`
	TitleToken []string      `json:"title_token"`
	Categories []string      `json:"categories"`
	Duration   pgtype.Int4   `json:"duration"`
	Genre      NullGenreEnum `json:"genre"`
	Mood       NullMoodEnum  `json:"mood"`
}

func (q *Queries) ListSongs(ctx context.Context, arg ListSongsParams) ([]ListSongsRow, error) {
	rows, err := q.db.Query(ctx, listSongs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSongsRow{}
	for rows.Next() {
		var i ListSongsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TitleToken,
			&i.Categories,
			&i.Duration,
			&i.Genre,
			&i.Mood,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSongsWithArtists = `-- name: ListSongsWithArtists :many
SELECT 
    s.id, 
    s.title, 
    s.title_token, 
    s.categories,
    s.duration,
    s.genre,
    s.mood,
    COALESCE(
        json_agg(json_build_object('id', a.id, 'name', a.name)) 
        FILTER (WHERE a.id IS NOT NULL),
        '[]'
    ) AS artists
FROM 
    songs s
LEFT JOIN 
    artist_songs sa ON sa.song_id = s.id
LEFT JOIN 
    artists a ON a.id = sa.artist_id
GROUP BY 
    s.id, s.title, s.title_token, s.categories, s.duration, s.genre, s.mood
ORDER BY 
    s.id
LIMIT $1 OFFSET $2
`

type ListSongsWithArtistsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListSongsWithArtistsRow struct {
	ID         string        `json:"id"`
	Title      string        `json:"title"`
	TitleToken []string      `json:"title_token"`
	Categories []string      `json:"categories"`
	Duration   pgtype.Int4   `json:"duration"`
	Genre      NullGenreEnum `json:"genre"`
	Mood       NullMoodEnum  `json:"mood"`
	Artists    interface{}   `json:"artists"`
}

func (q *Queries) ListSongsWithArtists(ctx context.Context, arg ListSongsWithArtistsParams) ([]ListSongsWithArtistsRow, error) {
	rows, err := q.db.Query(ctx, listSongsWithArtists, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSongsWithArtistsRow{}
	for rows.Next() {
		var i ListSongsWithArtistsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.TitleToken,
			&i.Categories,
			&i.Duration,
			&i.Genre,
			&i.Mood,
			&i.Artists,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSong = `-- name: UpdateSong :one
UPDATE songs
SET title       = $2,
    title_token = $3,
    categories  = $4,
    duration    = $5,
    genre       = $6,
    mood        = $7
WHERE id = $1
RETURNING id, title, title_token, categories, duration, genre, mood
`

type UpdateSongParams struct {
	ID         string        `json:"id"`
	Title      string        `json:"title"`
	TitleToken []string      `json:"title_token"`
	Categories []string      `json:"categories"`
	Duration   pgtype.Int4   `json:"duration"`
	Genre      NullGenreEnum `json:"genre"`
	Mood       NullMoodEnum  `json:"mood"`
}

type UpdateSongRow struct {
	ID         string        `json:"id"`
	Title      string        `json:"title"`
	TitleToken []string      `json:"title_token"`
	Categories []string      `json:"categories"`
	Duration   pgtype.Int4   `json:"duration"`
	Genre      NullGenreEnum `json:"genre"`
	Mood       NullMoodEnum  `json:"mood"`
}

func (q *Queries) UpdateSong(ctx context.Context, arg UpdateSongParams) (UpdateSongRow, error) {
	row := q.db.QueryRow(ctx, updateSong,
		arg.ID,
		arg.Title,
		arg.TitleToken,
		arg.Categories,
		arg.Duration,
		arg.Genre,
		arg.Mood,
	)
	var i UpdateSongRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.TitleToken,
		&i.Categories,
		&i.Duration,
		&i.Genre,
		&i.Mood,
	)
	return i, err
}
