// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: playlist.proto

package playlist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlaylistService_CreatePlaylist_FullMethodName         = "/playlist.PlaylistService/CreatePlaylist"
	PlaylistService_AddSongToPlaylist_FullMethodName      = "/playlist.PlaylistService/AddSongToPlaylist"
	PlaylistService_RemoveSongFromPlaylist_FullMethodName = "/playlist.PlaylistService/RemoveSongFromPlaylist"
	PlaylistService_MoveSongInPlaylist_FullMethodName     = "/playlist.PlaylistService/MoveSongInPlaylist"
	PlaylistService_GetPlaylistByID_FullMethodName        = "/playlist.PlaylistService/GetPlaylistByID"
	PlaylistService_ListMyPlaylists_FullMethodName        = "/playlist.PlaylistService/ListMyPlaylists"
)

// PlaylistServiceClient is the client API for PlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlaylistServiceClient interface {
	CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error)
	AddSongToPlaylist(ctx context.Context, in *AddSongToPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveSongFromPlaylist(ctx context.Context, in *RemoveSongFromPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MoveSongInPlaylist(ctx context.Context, in *MoveSongInPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPlaylistByID(ctx context.Context, in *GetPlaylistByIDRequest, opts ...grpc.CallOption) (*Playlist, error)
	ListMyPlaylists(ctx context.Context, in *ListMyPlaylistsRequest, opts ...grpc.CallOption) (*ListMyPlaylistsResponse, error)
}

type playlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlaylistServiceClient(cc grpc.ClientConnInterface) PlaylistServiceClient {
	return &playlistServiceClient{cc}
}

func (c *playlistServiceClient) CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlaylistResponse)
	err := c.cc.Invoke(ctx, PlaylistService_CreatePlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) AddSongToPlaylist(ctx context.Context, in *AddSongToPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlaylistService_AddSongToPlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) RemoveSongFromPlaylist(ctx context.Context, in *RemoveSongFromPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlaylistService_RemoveSongFromPlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) MoveSongInPlaylist(ctx context.Context, in *MoveSongInPlaylistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlaylistService_MoveSongInPlaylist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) GetPlaylistByID(ctx context.Context, in *GetPlaylistByIDRequest, opts ...grpc.CallOption) (*Playlist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Playlist)
	err := c.cc.Invoke(ctx, PlaylistService_GetPlaylistByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playlistServiceClient) ListMyPlaylists(ctx context.Context, in *ListMyPlaylistsRequest, opts ...grpc.CallOption) (*ListMyPlaylistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMyPlaylistsResponse)
	err := c.cc.Invoke(ctx, PlaylistService_ListMyPlaylists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlaylistServiceServer is the server API for PlaylistService service.
// All implementations must embed UnimplementedPlaylistServiceServer
// for forward compatibility.
type PlaylistServiceServer interface {
	CreatePlaylist(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error)
	AddSongToPlaylist(context.Context, *AddSongToPlaylistRequest) (*emptypb.Empty, error)
	RemoveSongFromPlaylist(context.Context, *RemoveSongFromPlaylistRequest) (*emptypb.Empty, error)
	MoveSongInPlaylist(context.Context, *MoveSongInPlaylistRequest) (*emptypb.Empty, error)
	GetPlaylistByID(context.Context, *GetPlaylistByIDRequest) (*Playlist, error)
	ListMyPlaylists(context.Context, *ListMyPlaylistsRequest) (*ListMyPlaylistsResponse, error)
	mustEmbedUnimplementedPlaylistServiceServer()
}

// UnimplementedPlaylistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlaylistServiceServer struct{}

func (UnimplementedPlaylistServiceServer) CreatePlaylist(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) AddSongToPlaylist(context.Context, *AddSongToPlaylistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSongToPlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) RemoveSongFromPlaylist(context.Context, *RemoveSongFromPlaylistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSongFromPlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) MoveSongInPlaylist(context.Context, *MoveSongInPlaylistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveSongInPlaylist not implemented")
}
func (UnimplementedPlaylistServiceServer) GetPlaylistByID(context.Context, *GetPlaylistByIDRequest) (*Playlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylistByID not implemented")
}
func (UnimplementedPlaylistServiceServer) ListMyPlaylists(context.Context, *ListMyPlaylistsRequest) (*ListMyPlaylistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyPlaylists not implemented")
}
func (UnimplementedPlaylistServiceServer) mustEmbedUnimplementedPlaylistServiceServer() {}
func (UnimplementedPlaylistServiceServer) testEmbeddedByValue()                         {}

// UnsafePlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlaylistServiceServer will
// result in compilation errors.
type UnsafePlaylistServiceServer interface {
	mustEmbedUnimplementedPlaylistServiceServer()
}

func RegisterPlaylistServiceServer(s grpc.ServiceRegistrar, srv PlaylistServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlaylistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlaylistService_ServiceDesc, srv)
}

func _PlaylistService_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_CreatePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).CreatePlaylist(ctx, req.(*CreatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_AddSongToPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSongToPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).AddSongToPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_AddSongToPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).AddSongToPlaylist(ctx, req.(*AddSongToPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_RemoveSongFromPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSongFromPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).RemoveSongFromPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_RemoveSongFromPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).RemoveSongFromPlaylist(ctx, req.(*RemoveSongFromPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_MoveSongInPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveSongInPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).MoveSongInPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_MoveSongInPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).MoveSongInPlaylist(ctx, req.(*MoveSongInPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_GetPlaylistByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).GetPlaylistByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_GetPlaylistByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).GetPlaylistByID(ctx, req.(*GetPlaylistByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlaylistService_ListMyPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyPlaylistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlaylistServiceServer).ListMyPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlaylistService_ListMyPlaylists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlaylistServiceServer).ListMyPlaylists(ctx, req.(*ListMyPlaylistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlaylistService_ServiceDesc is the grpc.ServiceDesc for PlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playlist.PlaylistService",
	HandlerType: (*PlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlaylist",
			Handler:    _PlaylistService_CreatePlaylist_Handler,
		},
		{
			MethodName: "AddSongToPlaylist",
			Handler:    _PlaylistService_AddSongToPlaylist_Handler,
		},
		{
			MethodName: "RemoveSongFromPlaylist",
			Handler:    _PlaylistService_RemoveSongFromPlaylist_Handler,
		},
		{
			MethodName: "MoveSongInPlaylist",
			Handler:    _PlaylistService_MoveSongInPlaylist_Handler,
		},
		{
			MethodName: "GetPlaylistByID",
			Handler:    _PlaylistService_GetPlaylistByID_Handler,
		},
		{
			MethodName: "ListMyPlaylists",
			Handler:    _PlaylistService_ListMyPlaylists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "playlist.proto",
}
