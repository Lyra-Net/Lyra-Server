// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: trusted_devices.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createOrUpdateTrustedDevice = `-- name: CreateOrUpdateTrustedDevice :exec
INSERT INTO trusted_devices (user_id, device_id, browser, os, expires_at)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (user_id, device_id)
DO UPDATE SET
  expires_at = EXCLUDED.expires_at,
  updated_at = now()
`

type CreateOrUpdateTrustedDeviceParams struct {
	UserID    uuid.UUID        `json:"user_id"`
	DeviceID  string           `json:"device_id"`
	Browser   string           `json:"browser"`
	Os        string           `json:"os"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateOrUpdateTrustedDevice(ctx context.Context, arg CreateOrUpdateTrustedDeviceParams) error {
	_, err := q.db.Exec(ctx, createOrUpdateTrustedDevice,
		arg.UserID,
		arg.DeviceID,
		arg.Browser,
		arg.Os,
		arg.ExpiresAt,
	)
	return err
}

const deleteTrustedDevice = `-- name: DeleteTrustedDevice :exec
DELETE FROM trusted_devices
WHERE user_id = $1 AND device_id = $2
`

type DeleteTrustedDeviceParams struct {
	UserID   uuid.UUID `json:"user_id"`
	DeviceID string    `json:"device_id"`
}

func (q *Queries) DeleteTrustedDevice(ctx context.Context, arg DeleteTrustedDeviceParams) error {
	_, err := q.db.Exec(ctx, deleteTrustedDevice, arg.UserID, arg.DeviceID)
	return err
}

const getTrustedDevices = `-- name: GetTrustedDevices :many
SELECT id, device_id, browser, os, expires_at, created_at, updated_at
FROM trusted_devices
WHERE user_id = $1
ORDER BY created_at DESC
`

type GetTrustedDevicesRow struct {
	ID        uuid.UUID        `json:"id"`
	DeviceID  string           `json:"device_id"`
	Browser   string           `json:"browser"`
	Os        string           `json:"os"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetTrustedDevices(ctx context.Context, userID uuid.UUID) ([]GetTrustedDevicesRow, error) {
	rows, err := q.db.Query(ctx, getTrustedDevices, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTrustedDevicesRow{}
	for rows.Next() {
		var i GetTrustedDevicesRow
		if err := rows.Scan(
			&i.ID,
			&i.DeviceID,
			&i.Browser,
			&i.Os,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isValidTrustedDevice = `-- name: IsValidTrustedDevice :one
SELECT 1
FROM trusted_devices
WHERE user_id = $1 AND device_id = $2 AND browser = $3 AND os = $4 AND expires_at > now()
`

type IsValidTrustedDeviceParams struct {
	UserID   uuid.UUID `json:"user_id"`
	DeviceID string    `json:"device_id"`
	Browser  string    `json:"browser"`
	Os       string    `json:"os"`
}

func (q *Queries) IsValidTrustedDevice(ctx context.Context, arg IsValidTrustedDeviceParams) (int32, error) {
	row := q.db.QueryRow(ctx, isValidTrustedDevice,
		arg.UserID,
		arg.DeviceID,
		arg.Browser,
		arg.Os,
	)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
