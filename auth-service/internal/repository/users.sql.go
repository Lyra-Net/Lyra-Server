// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addEmail = `-- name: AddEmail :exec
UPDATE users
SET email_encrypted = $1,
    email_hash = $2
WHERE user_id = $3
`

type AddEmailParams struct {
	EmailEncrypted pgtype.Text `json:"email_encrypted"`
	EmailHash      pgtype.Text `json:"email_hash"`
	UserID         uuid.UUID   `json:"user_id"`
}

func (q *Queries) AddEmail(ctx context.Context, arg AddEmailParams) error {
	_, err := q.db.Exec(ctx, addEmail, arg.EmailEncrypted, arg.EmailHash, arg.UserID)
	return err
}

const checkActiveEmail = `-- name: CheckActiveEmail :one
SELECT email_hash
FROM users
WHERE email_hash = $1
`

func (q *Queries) CheckActiveEmail(ctx context.Context, emailHash pgtype.Text) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, checkActiveEmail, emailHash)
	var email_hash pgtype.Text
	err := row.Scan(&email_hash)
	return email_hash, err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (user_id, display_name, username, password_hash)
VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	UserID       uuid.UUID   `json:"user_id"`
	DisplayName  pgtype.Text `json:"display_name"`
	Username     string      `json:"username"`
	PasswordHash string      `json:"password_hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.UserID,
		arg.DisplayName,
		arg.Username,
		arg.PasswordHash,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, display_name, username, password_hash, email_encrypted, email_hash, is_2fa, change_pass_at, created_at, updated_at FROM users
WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.DisplayName,
		&i.Username,
		&i.PasswordHash,
		&i.EmailEncrypted,
		&i.EmailHash,
		&i.Is2fa,
		&i.ChangePassAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id, display_name, username, password_hash, email_encrypted, email_hash, is_2fa, change_pass_at, created_at, updated_at FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.DisplayName,
		&i.Username,
		&i.PasswordHash,
		&i.EmailEncrypted,
		&i.EmailHash,
		&i.Is2fa,
		&i.ChangePassAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password_hash = $2, updated_at = now()
WHERE user_id = $1
`

type UpdatePasswordParams struct {
	UserID       uuid.UUID `json:"user_id"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.UserID, arg.PasswordHash)
	return err
}
