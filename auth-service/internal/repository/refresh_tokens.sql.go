// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_tokens.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
INSERT INTO refresh_tokens (id, user_id, token, access_jti, device_id, browser, os, expires_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
`

type CreateRefreshTokenParams struct {
	ID        uuid.UUID        `json:"id"`
	UserID    uuid.UUID        `json:"user_id"`
	Token     string           `json:"token"`
	AccessJti uuid.UUID        `json:"access_jti"`
	DeviceID  pgtype.Text      `json:"device_id"`
	Browser   pgtype.Text      `json:"browser"`
	Os        pgtype.Text      `json:"os"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.Exec(ctx, createRefreshToken,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.AccessJti,
		arg.DeviceID,
		arg.Browser,
		arg.Os,
		arg.ExpiresAt,
	)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_tokens
WHERE id = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, id)
	return err
}

const deleteUserRefreshTokens = `-- name: DeleteUserRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) DeleteUserRefreshTokens(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserRefreshTokens, userID)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT id, user_id, token, access_jti, device_id, browser, os, expires_at, created_at FROM refresh_tokens
WHERE id = $1 AND user_id = $2
`

type GetRefreshTokenParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetRefreshToken(ctx context.Context, arg GetRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, getRefreshToken, arg.ID, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.AccessJti,
		&i.DeviceID,
		&i.Browser,
		&i.Os,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
